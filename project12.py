#Problem 12 - Highly Divisible Triangular Number
"""
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
ten terms would be:
            1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
             1: 1
             3: 1, 3
             6: 1, 2, 3, 6
            10: 1, 2, 5, 10
            15: 1, 3, 5, 15
            21: 1, 3, 7, 21
            28: 1, 2, 4, 7, 14, 28
 
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred
divisors?
"""

def triangularNumberDivisor(limit):
    var = 1
    while True:
        divisors = []
        total = var*(var+1)//2 #find the triangle number

        for k in range(1, total+1): #find the divisors
            if total % k == 0:
                divisors.append(k)

        if len(divisors) >= limit: #check for the required amount of divisors
            return total, divisors
        var += 1


limit = 500
th, d = triangularNumberDivisor(limit)
div = str(d[0])
d.remove(1)
for x in d:
    div += f", {x}"
print(f"{th}: {div}")




